INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('052c02a9-98d9-4fd2-a880-204432762861', 'User creation or linking', 'Flow for the existing/non-existing user alternatives', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('0d4fbd0d-146f-4dcf-a2f0-1cf43589461d', 'Verify Existing Account by Re-authentication', 'Reauthentication of existing account', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('14fc1de5-60be-4536-8f81-85c25b3a2d61', 'Account verification options', 'Method with which to verity the existing account', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('1dbdc252-09cb-4b0c-8b25-09bcd85769eb', 'reset credentials', 'Reset credentials for a user if they forgot their password or something', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('2bc4296f-d853-43c3-a367-5ae9e398c0c7', 'first broker login', 'Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('39ebab97-e382-4d50-9c4e-2058025523a2', 'Account verification options', 'Method with which to verity the existing account', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('3ecb6901-ac0c-4f52-a11e-a27949588c9c', 'registration form', 'registration form', 'master', 'form-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('4496a5ea-be84-4c9c-8165-92edcfffba3e', 'User creation or linking', 'Flow for the existing/non-existing user alternatives', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('4a94589a-aa14-43be-8dcc-bb7b34a0a9ae', 'forms', 'Username, password, otp and other auth forms.', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('4abf05e5-d175-48af-983b-022925bac692', 'Handle Existing Account', 'Handle what to do if there is existing account with same email/username like authenticated identity provider', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('4c84e878-e288-4ac2-88ef-40b5768ee1bb', 'first broker login', 'Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('555b346a-c243-4cce-9a86-b73076474b2a', 'registration form', 'registration form', 'pcmr', 'form-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('57d5031b-ddf3-490f-97c5-dc5b91bcc327', 'reset credentials', 'Reset credentials for a user if they forgot their password or something', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('582e7428-1464-4fb0-8f3e-7ff105eaf994', 'Browser - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('5a4144df-cb66-430d-84d8-8252a3d1d24c', 'browser', 'browser based authentication', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('5e9b2fbb-546a-4c80-aa5e-0f046ea39973', 'browser', 'browser based authentication', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('5f79d70d-8d41-4ee6-a003-e3c8a70b2cd1', 'Verify Existing Account by Re-authentication', 'Reauthentication of existing account', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('619157d8-1d59-4010-8efd-71db72cfa433', 'forms', 'Username, password, otp and other auth forms.', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('6439801d-9fa1-4a55-9ab6-b5e6993af7ee', 'First broker login - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('67a371fc-cf1c-450a-a0ce-e76ba0e369ac', 'registration', 'registration flow', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('696ce4bf-6c90-423f-87fb-8867cf68a9e9', 'direct grant', 'OpenID Connect Resource Owner Grant', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('797fa542-5042-4ebb-8997-f5b123bbda88', 'Reset - Conditional OTP', 'Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('838d089f-0656-4bcf-9aff-7429bfd3f738', 'clients', 'Base authentication for clients', 'master', 'client-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('881aad96-09eb-4421-9a94-f7542e7de17e', 'Direct Grant - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('8c7b3c23-0620-44a9-a9c2-f3fe3436bc15', 'Reset - Conditional OTP', 'Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('90dd97e7-a7a4-4a4e-a861-dc25a3778457', 'Direct Grant - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('983224b1-eb01-4d3c-bc32-e0399412d633', 'clients', 'Base authentication for clients', 'pcmr', 'client-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('9ba74dcf-10d4-47e7-8e5e-b77ab92e4546', 'Handle Existing Account', 'Handle what to do if there is existing account with same email/username like authenticated identity provider', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('a9057843-cdd3-4c1d-9ae7-3209909f3fb4', 'saml ecp', 'SAML ECP Profile Authentication Flow', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('b5632be8-ab4b-4580-97d8-293775a98280', 'direct grant', 'OpenID Connect Resource Owner Grant', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('bb8303e0-a70c-491c-89b7-3012a432fb64', 'Browser - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('c3ce17c1-c976-4d51-b6ac-eda2d9b47690', 'http challenge', 'An authentication flow based on challenge-response HTTP Authentication Schemes', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('cd2dbbdf-eb05-4ac6-a84e-40e008f8ce06', 'Authentication Options', 'Authentication options.', 'pcmr', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('d45f6169-1425-4907-b5a6-119c00c4daf1', 'docker auth', 'Used by Docker clients to authenticate against the IDP', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('d67e43db-4788-4b23-9231-7f84a7183584', 'saml ecp', 'SAML ECP Profile Authentication Flow', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('d91edb9f-e1a1-46c0-bb6d-89d8e46a154a', 'registration', 'registration flow', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('db208657-a9bd-40e8-9119-2833cf280414', 'http challenge', 'An authentication flow based on challenge-response HTTP Authentication Schemes', 'master', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('e57a17cc-d500-4206-b2ad-706eb18eba5f', 'Authentication Options', 'Authentication options.', 'master', 'basic-flow', false, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('fd8f95c4-aef4-4d15-86b2-2bf6c23005e0', 'docker auth', 'Used by Docker clients to authenticate against the IDP', 'pcmr', 'basic-flow', true, true);
INSERT INTO keycloak.AUTHENTICATION_FLOW (ID, ALIAS, DESCRIPTION, REALM_ID, PROVIDER_ID, TOP_LEVEL, BUILT_IN) VALUES ('ff3c0afc-37c6-4c22-addd-8d1a98e79d05', 'First broker login - Conditional OTP', 'Flow to determine if the OTP is required for the authentication', 'master', 'basic-flow', false, true);